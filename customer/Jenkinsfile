pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr:'5'))
    }


    environment {
        PATH = "/usr/local/bin:$PATH"
        DOCKERHUB_CREDENTIALS = credentials('92dc7ff3-5b6d-4958-9c0a-62919d9116aa')
        IMAGE_NAME = 'customer_portal'
    }

    stages {
        stage('Stop and Cleanup') {
            steps {
                sh '''
                echo "stopping container"
                docker ps -q --filter "name=mysql_portal" | xargs -r docker stop
                docker ps -aq --filter "name=mysql_portal" | xargs -r docker rm
                docker ps -q --filter "name=customer_portal" | xargs -r docker stop
                docker ps -aq --filter "name=customer_portal" | xargs -r docker rm
                '''
            }
        }
        stage('Login DockerHub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin docker.io'
            }
        }
        stage('List Files') {
            steps {
                sh 'ls -al'
            }
        }

        stage('Build MySql Image') {
            steps {
                sh 'docker build -t tanujsahoo/mysql_portal:${BUILD_NUMBER} -f ./customer/MySqlDockerfile .'
            }
        }
        stage('Build WebApp Image') {
            steps {
                sh 'docker build -t tanujsahoo/customer_portal:${BUILD_NUMBER} -f ./customer/Dockerfile .'
            }
        }

        //  stage('Install Dependency') {
        //     steps {
        //         sh 'RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version=2.4.4'
        //     }
        // }

        stage('Run Composer and Unit Tests') {
            steps {
                dir("customer/src") {
                    sh(label: 'Run Composer',
                    script:"""
                    composer install --ignore-platform-req=ext-gd   
                    chmod -R 777 vendor
                    chmod -R 777 storage/*
                    composer dump-autoload
                    """)
                }
            }
        }
        stage('Unit Testing') {
            steps {
                sh """
                    docker exec customer_php php ./vendor/phpunit/phpunit/phpunit /var/www/html/tests/Unit
                """
            }
        }

        // stage('Integration Testing') {
        //     steps {
        //         sh """
        //             docker exec customer_php php ./vendor/phpunit/phpunit/phpunit /var/www/html/tests/Feature
        //         """
        //     }
        // }

        stage('Creating Tag') {
            steps {
                sh 'docker tag tanujsahoo/mysql_portal:${BUILD_NUMBER} tanujsahoo/mysql_portal:${BUILD_NUMBER}'
                sh 'docker tag tanujsahoo/customer_portal:${BUILD_NUMBER} tanujsahoo/customer_portal:${BUILD_NUMBER}'
            }
        }
        stage('Push Build') {
            steps {
                sh '''
                docker push tanujsahoo/mysql_portal:${BUILD_NUMBER}
                docker push tanujsahoo/customer_portal:${BUILD_NUMBER}
                '''
            }
        }

    }
}